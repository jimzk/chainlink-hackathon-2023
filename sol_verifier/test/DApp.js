const {
  time,
  loadFixture,
} = require("@nomicfoundation/hardhat-toolbox/network-helpers");
const { anyValue } = require("@nomicfoundation/hardhat-chai-matchers/withArgs");
const { expect } = require("chai");

describe("Dapp", function () {
  async function deployDApp() {
    // Contracts are deployed using the first signer/account by default
    const [owner, otherAccount] = await ethers.getSigners();

    const DApp = await ethers.getContractFactory("DApp");
    const dapp = await DApp.deploy();

    return { dapp, owner, otherAccount };
  }

  function getProofInput() {
    const pA = [
      "0x2d94d03bafc4bec371de7e24fd1ff100833646cc27791d7dcf45fb068ef69a37",
      "0x2bbb3445f0d6425c3fb3892dfa091293855b59af1e04f2fad1e5dad1855ad0bb",
    ];
    const pB = [
      [
        "0x0a192ebd33cd1c6ba9f8a59d5714540a704098eb94352e4cfcf23504a5eb5f0c",
        "0x0d300f7038b9383faa2d1e95c73640f60714dab4033a6cfbbbf1cc1429ee9b78",
      ],
      [
        "0x2595fd6b47868ce3148e22248fe9e8ced22702c27eece1dec6782f821dedaa74",
        "0x10379ea8aecbb9f9937d58b172275d50a66e6ad4fa642d8d19f51c17e5d24f51",
      ],
    ];
    const pC = [
      "0x1b41e92a5c7e5e189b002df07062bb7f6a429f7c7bc07d9a5b0c10f6fe34bb98",
      "0x1d595b46976444f940173de3df659c6b7c10cd4a3cbddf1cfdbf51e9089c880a",
    ];
    const publicSigns = [
      "0x0000000000000000000000000000000000000000000000000000000000000001",
      "0x00000000000000000000000000000000000000000000000096147149bcb0ee47",
      "0x00000000000000000000000000000000000000000000000032feded7851ce4d1",
      "0x000000000000000000000000000000000000000000000000a515a30e1be40d91",
      "0x0000000000000000000000000000000000000000000000003cb4881596c3be54",
      "0x0000000000000000000000000000000000000000000000003318bb574b822030",
      "0x00000000000000000000000000000000000000000000000044976fd76233b5bb",
      "0x000000000000000000000000000000000000000000000000299bd3d7a1cee858",
      "0x0000000000000000000000000000000000000000000000001406fc9a51ec8e46",
      "0x000000000000000000000000000000000000000000000000eda3e0a1988eede6",
      "0x000000000000000000000000000000000000000000000000d91beb7258af9d8b",
      "0x000000000000000000000000000000000000000000000000348d596d093c462f",
      "0x0000000000000000000000000000000000000000000000004991daf16ee14be5",
      "0x000000000000000000000000000000000000000000000000823283ef3a17787e",
      "0x000000000000000000000000000000000000000000000000483b3242cf76e357",
      "0x000000000000000000000000000000000000000000000000d4f4a8b163fbf440",
      "0x000000000000000000000000000000000000000000000000666bd7c1475a167a",
      "0x000000000000000000000000000000000000000000000000a7db04bcd985c4b3",
      "0x0000000000000000000000000000000000000000000000000ce3a5c6917927c8",
      "0x00000000000000000000000000000000000000000000000027f4ab95656e3aa7",
      "0x000000000000000000000000000000000000000000000000536c14663ad0c364",
      "0x0000000000000000000000000000000000000000000000006a73051ba20c5727",
      "0x0000000000000000000000000000000000000000000000008800d489c752530f",
      "0x000000000000000000000000000000000000000000000000606b3732b33391b3",
      "0x000000000000000000000000000000000000000000000000bf3247e188c1604a",
    ];
    return { pA, pB, pC, publicSigns };
  }

  describe("verifyProof", function () {
    it("Call verifyProof", async function () {
      const { dapp } = await loadFixture(deployDApp);

      const { pA, pB, pC, publicSigns } = getProofInput();
      const result = await dapp.verifyProof(pA, pB, pC, publicSigns);
      expect(result).to.equal(true);
    });
  });

  describe("verifyAndParsePrice", function () {
    it("Call verifyAndParsePrice", async function () {
      const { dapp, owner } = await loadFixture(deployDApp);

      const { pA, pB, pC, publicSigns } = getProofInput();
      const reportContexts = [
        [
          "0x0006015a2de20abc8c880eb052a09c069e4edf697529d12eeae88b7b6867fc81",
          "0x00000000000000000000000000000000000000000000000000000000080f7914",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
        ],
        [
          "0x0006015a2de20abc8c880eb052a09c069e4edf697529d12eeae88b7b6867fc81",
          "0x00000000000000000000000000000000000000000000000000000000080f7a19",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
        ],
      ];
      const reportBlobs = [
        "0x0002191c50b7bdaf2cb8672453141946eea123f8baeaa8d2afa4194b6955e68300000000000000000000000000000000000000000000000000000000655ac7b400000000000000000000000000000000000000000000000000000000655ac7b4000000000000000000000000000000000000000000000000000000000000138800000000000000000000000000000000000000000000000000000000000a1ea000000000000000000000000000000000000000000000000000000000655c1934000000000000000000000000000000000000000000000000d13f2ce9cd29337c",
        "0x0002191c50b7bdaf2cb8672453141946eea123f8baeaa8d2afa4194b6955e68300000000000000000000000000000000000000000000000000000000655ac7be00000000000000000000000000000000000000000000000000000000655ac7be000000000000000000000000000000000000000000000000000000000000138800000000000000000000000000000000000000000000000000000000000a20f800000000000000000000000000000000000000000000000000000000655c193e000000000000000000000000000000000000000000000000d1140d80baac9800",
      ];
      const result = await dapp.verifyAndParsePrice(
        reportContexts,
        reportBlobs,
        pA,
        pB,
        pC,
        publicSigns
      );
      const expected = [
        [
          "0x0002191c50b7bdaf2cb8672453141946eea123f8baeaa8d2afa4194b6955e683",
          "1700448180",
          "1700448180",
          "5000",
          "663200",
          "1700534580",
          "15077819460140741500",
        ],
        [
          "0x0002191c50b7bdaf2cb8672453141946eea123f8baeaa8d2afa4194b6955e683",
          "1700448190",
          "1700448190",
          "5000",
          "663800",
          "1700534590",
          "15065681500000000000",
        ],
      ];
      for (let i = 0; i < expected.length; i++) {
        for (let j = 0; j < expected[i].length; j++) {
          expect(result[i][j]).to.equal(expected[i][j]);
        }
      }

      // Estimate gas cost
      await dapp.connect(owner).updatePriceMA(
        reportContexts,
        reportBlobs,
        pA,
        pB,
        pC,
        publicSigns
      );
    });
  });
});
